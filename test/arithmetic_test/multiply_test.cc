#include "bigint.hpp"
#include <gtest/gtest.h>

TEST(Multiply, Pos) {
  BigInt a("3068382660");
  BigInt b("174553180");
  BigInt product = a * b;
  EXPECT_EQ(product.toString(), "535595950759858800");
}

TEST(Multiply, Neg) {
  BigInt a("-4629659205");
  BigInt b("-238497863");
  BigInt product = a * b;
  EXPECT_EQ(product.toString(), "1104163826810778915");
}

TEST(Multiply, PosNeg) {
  BigInt a("-1230100948");
  BigInt b("303219719");
  BigInt product = a * b;
  EXPECT_EQ(product.toString(), "-372990863794193612");
}

TEST(Multiply, Zero) {
  BigInt a(0);
  BigInt b(randomBigInt(1000));
  BigInt product = a * b;
  EXPECT_EQ(product.toString(), "0");
}

TEST(Multiply, One) {
  BigInt a(1);
  BigInt b(randomBigInt(1000));
  BigInt product = a * b;
  EXPECT_EQ(product, b);
}

TEST(Multiply, LargeNumber) {
  BigInt a(
      "-45730044083439145309404793417819501361968578019805049608024727597283409"
      "735422457538997283253132934438534372027771384096254734775877140262819428"
      "071280616235497937407275490100460109392913326860871140349851315731947444"
      "083462620086681653203632469474878148148370936809389000407751621770717092"
      "091868380543773749129286443626692593071508217000772514070791310868078407"
      "032383463091591597970124008216162531541524961653837917457918323893181171"
      "423317847468574940846368588456311933688430081513227374557642184714871517"
      "242192515240684097774067234240472471777494980901444729152319198976231252"
      "848476405178024337687837839549334550394458651069610557570204308564287879"
      "895433064866930084735873865125553860440041817421517223689955505092897124"
      "074984492903759042523016024377264710206828914119086141615032072398987893"
      "318877806660857424704894154618151502210924641922877505403205449266208869"
      "020242065603248329766843087054325308917493608704388362125686288707307385"
      "36708906102045425205607592275022977771734215377579179473086146591");
  BigInt b(
      "503904051251535641053524337247952396721949404006682842916961051099535440"
      "347625812670215174511778218844134311265100163155574895961753386651949526"
      "007925082456150364624242960580373690429304551309607885132362825906626994"
      "695067169372610547552203326504864540167813811924726461148264434409140815"
      "211517238542092223218586581800616859580005170646039504243346786560543480"
      "142630943458968755679249391645820606266352066746604511193751089763255586"
      "889606236699173836235649888893338182108727416290554463817914768914693615"
      "888055726185257457191370057984615461672360344860794986329178123959496580"
      "937055436125991295181355943276358256257092461561556021553853229104781732"
      "563899722827987302583255455528623270889911377307030883497808399591587088"
      "335554793005712181504627161686701165637809194580523206788022562128063288"
      "312801639207304644631172046686161166887249128425288946598627344959109695"
      "630782181729099688248273892413157173767786230085213057868589818948490317"
      "6625501452938302953748695802730973915920424050232526362916086380");
  BigInt product = a * b;
  EXPECT_EQ(
      product.toString(),
      "-23043554477556303287320517003836387329141482399480518607302649921236271"
      "495769844020834208355571317946379229038663628827206970002985399440749410"
      "915956240944224815091546708487117256346028133291559821258351700993067390"
      "480524958486111399601673276961975284962248331171620144347354322493936892"
      "163071702584291432878896969982949595798255880476910789658340558947466055"
      "763472416914683478255191992938552571047581634251935914318946693363124076"
      "728557927133542104670122548832800509749412131712939860619448762620350304"
      "182332634862822494745958678285405876948831936149208934494898681675941099"
      "085975871077659155336424623365199825304900324173301193706729350656973638"
      "949669345487357732435024892467074937747803296213357158112041349148708770"
      "403908506215086915892474322105459190507752073994127293662262688044902792"
      "942610871509838939744266054926528700377006377636483391924422058888213409"
      "870268155528053592156479954918138651151006427543632233692102094843529205"
      "505126052359849166659201707608984098016286329060096514617971898932991809"
      "017092350752952139127377005583144593833263562482200766173395471105079108"
      "070594020284233416170256054017639481088536657906484093213234139915034714"
      "885471037725747843842627770468632792694413251740024317916453891244619185"
      "055851732643887185232274737522571725744007282453739979733763430867833310"
      "997469687268420917932013642225895747875750079754482155250775246369514005"
      "404974585757018152148305382786865684837979063022953110887431697484514915"
      "401009286914343596993039456595417438032557243780494561726608959756917750"
      "795771015316349635136441967260394632199701326661230795863737541678276829"
      "972365694480007667542625778493446912004577812780749403361718955381254950"
      "798475962977117431037546387931581768286169862941197220743993582060645728"
      "717220498025107565546132055685906942575645577302387760358261468244994019"
      "288268933595285902583159429014854208425125901654613755466031300877471456"
      "279153974704499955835893722707515370248986732395356675679561835989500080"
      "497008402638781423910583397466390555816273727400698530580");
}
