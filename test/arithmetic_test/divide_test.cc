#include "bigint.hpp"
#include <cstdlib>
#include <gtest/gtest.h>
#include <stdexcept>

TEST(Divide, Zero) {
  BigInt a(randomize(1000));
  BigInt b(0);
  EXPECT_THROW(a / b, std::logic_error);
}

TEST(Divide, One) {
  BigInt a(randomize(1000));
  BigInt b(1);
  EXPECT_EQ(a / b, a);
}

TEST(Divide, NegativeOne) {
  BigInt a(randomize(1000));
  BigInt b(-1);
  EXPECT_EQ(a / b, -a);
}

TEST(Divide, Equal) {
  BigInt a(randomize(1000));
  EXPECT_EQ(a / a, BigInt(1));
}

TEST(Divide, Greater) {
  BigInt a(randomize(999));
  BigInt b(randomize(1000));
  EXPECT_EQ(a / b, BigInt(0));
}

TEST(Divide, Small) {
  BigInt a("94590346979555");
  BigInt b("1518191135784");
  EXPECT_EQ((a / b).toString(), "62");
}

TEST(Divide, Negative) {
  BigInt a("-581797522293470");
  BigInt b("2382775724262");
  EXPECT_EQ((a / b).toString(), "-244");
}

TEST(Divide, Large) {
  BigInt a(
      "560586723800030337258778302959367811740789264928188997884920221571512229"
      "848722055968715040808198210101578216007600251334315503660763783366893687"
      "639531380829385395316483931759554923222909252988286284445988157427945204"
      "378829684861411751489915780388437684861579819594432166481704308535181321"
      "794005817076226760710767712392934679363297885387745038422663187808045543"
      "532571640050292780588085319844001380581443623736065084203645834296932294"
      "950847029822581552436912207082210743951337090198124923352805026484265752"
      "163165694452254680490414124229738455673503562420561449112360820541177485"
      "594072513279215259152469195564417849447863864868650025754040421343663483"
      "887473391007722055211254691761136630931397149108011779936803995664366346"
      "991658461481056844362016632042399646385458399749191195666208334177489535"
      "601395399340763943850325716046695573504490489693938140532943827160652999"
      "365006356930327250636009938632280192023166904904692738662670729212786505"
      "8440964604293676272396348908047268696250349701269556653831929088");
  BigInt b(
      "-81523075586856252103745890250793733032997133369603217115671215815298358"
      "674421216151877609072585916889651995168132170096181707423149839763359444"
      "013873410591073347855681662075460994202235728196546068519168806322264909"
      "354099177913045282950704344030053601493852867749588634705663329800770714"
      "836190412830023075919964456652640735689847125158796885471752862006318596"
      "220571034587304851057758415934906272415147583092299345085151040013275258"
      "629414317009974146293712438063490028979587745291184280218206687291647404"
      "314425074511117355526040063066357636240434661260515893532555660159165798"
      "886072659007799138207878881978144089153090666691516312736800043704112406"
      "204072441889146524837086072068426983554688852703982852187384475107658354"
      "537197580584621412613344298834191595370489224650594623073481503716438344"
      "522671437868016243785692325363556259888810633507264623562506199647275623"
      "7816703244610632434312695262630688534");
  EXPECT_EQ((a / b).toString(),
            "-68764177475464657966535744368168263888733343841668822435868514898"
            "25592166276262668846347983594165");
}

TEST(Divide, Extreme) {
  BigInt a(randomize(1500));
  BigInt b(randomize(750));
  EXPECT_NO_THROW(a / b);
}